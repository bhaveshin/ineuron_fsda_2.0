
create or replace TABLE SALES_DATA (
	ORDER_ID STRING,
    ORDER_DATE STRING,
    SHIP_DATE STRING,
    SHIP_MODE VARCHAR(50),
    CUSTOMER_NAME VARCHAR(100),
    SEGMENT VARCHAR(50),
    STATE VARCHAR(50),
    COUNTRY VARCHAR(50),
	MARKET VARCHAR(50),
	REGION VARCHAR(50),
	PRODUCT_ID VARCHAR(50),
	CATEGORY VARCHAR(50),
	SUB_CATEGORY VARCHAR(50),
	PRODUCT_NAME VARCHAR(500),
	SALES NUMBER(10,2),
	QUANTITY NUMBER(10,2),
	DISCOUNT NUMBER(10,2),
	PROFIT NUMBER(10,2),
	SHIPPING_COST NUMBER(10,2),
	ORDER_PRIORITY VARCHAR(50),
	YEAR VARCHAR(10)
);
SELECT * FROM SALES_DATA LIMIT 20;

--1 .SET PRIMARY KEY.
ALTER TABLE SALES_DATA
ADD PRIMARY KEY (ORDER_ID); 

--2. CHECK THE ORDER DATE AND SHIP DATE TYPE AND THINK IN WHICH DATA TYPE YOU HAVE TO CHANGE.
ALTER TABLE SALES_DATA
ALTER ORDER_DATE SET DATA TYPE DATE;

-- THE ABOVE CODE DID NOT WORK BECAUSE I HAD A VARCHAR COLUMN TYPE WHEN I CREATED SALES_DATA TABLE
-- SO I CREATED A TEMPORARY NEW COLUMN NEW_COL AS DATE DATA TYPE
-- AND UPDATED THE NEW COULMN USING UPDATE/SET COMMAND THEN DROPPED THE OLD COLUMN ORDER_DATE USING ALTER TABLE/DROP COMMAND
-- CREATED A NEW COLUMN ORDER_DATE DATE TYPE AND THEN USED UPDATE/SET COMMAND ON THE NEW COLUMN
-- FINALLY DROPPED THE 'NEW_COL' TEMPORARY COLUMN

ALTER TABLE SALES_DATA ADD new_col DATE; --ADDING A NEW TEMPORARY COLUMN

UPDATE SALES_DATA SET NEW_COL = ORDER_dATE;  --UPDATE THE NEW COLUMN WITH VALUES FROM NEW_COL
DESC TABLE SALES_DATA;

ALTER TABLE SALES_DATA DROP COLUMN ORDER_DATE; --DROPPING THE OLD ORDER_DATE COLUMN
ALTER TABLE SALES_DATA ADD ORDER_DATE DATE; --CREATING A NEW COLUMN ORDER_DATE WITH DATE DATA TYPE
UPDATE SALES_DATA SET ORDER_DATE = NEW_COL; -- UPDATING VALUES OF ORDER_DATE FROM NEW_COL
DESC TABLE SALES_DATA;

UPDATE SALES_DATA SET NEW_COL = SHIP_dATE; --UPDATE THE NEW COLUMN WITH VALUES FROM ORDER_DATE
ALTER TABLE SALES_DATA DROP COLUMN SHIP_DATE; --DROPPING THE OLD SHIP_DATE COLUMN
ALTER TABLE SALES_DATA ADD SHIP_DATE DATE; --CREATING A NEW COLUMN SHIP_DATE WITH DATE DATA TYPE
UPDATE SALES_DATA SET SHIP_dATE = NEW_COL; --UPDATE THE NEW COLUMN WITH VALUES FROM NEW_COL
DESC TABLE SALES_DATA;


ALTER TABLE SALES_DATA DROP COLUMN NEW_COL; -- DROPPING TEMPORARY COLUMN CREATED BEFORE
CREATE OR REPLACE TABLE SALES_DATA_COPY LIKE SALES_DATA; --CREATING A COPY OF SALES_DATA TABLE


--3. EXTACT THE LAST NUMBER AFTER THE - AND CREATE OTHER COLUMN AND UPDATE IT.
SELECT  split_part(ORDER_ID, '-',  3) AS ORDER_EXTRACT 
FROM SALES_DATA;


--4.  FLAG ,IF DISCOUNT IS GREATER THEN 0 THEN  YES ELSE FALSE AND PUT IT IN NEW COLUMN FRO EVERY ORDER ID.
SELECT DISCOUNT, 
    CASE DISCOUNT
        WHEN 0 THEN 'FALSE'
        ELSE 'TRUE'
    END AS DISCOUNT_FLAG
FROM SALES_DATA;

--FIND OUT THE FINAL PROFIT AND PUT IT IN COLUMN FOR EVERY ORDER ID.
SELECT ORDER_ID, 
    SUM(PROFIT) FINAL_PROFIT
FROM SALES_DATA
GROUP BY ORDER_ID;

--6.  FIND OUT HOW MUCH DAYS TAKEN FOR EACH ORDER TO PROCESS FOR THE SHIPMENT FOR EVERY ORDER ID.
SELECT ORDER_ID, 
    SHIP_DATE - ORDER_DATE AS DAYS_TO_SHIP
FROM SALES_DATA
GROUP BY ORDER_ID, SHIP_DATE, ORDER_DATE;

--7 . FLAG THE PROCESS DAY AS BY RATING 
--IF IT TAKES LESS OR EQUAL 3  DAYS MAKE 5,
--LESS OR EQUAL THAN 6 DAYS BUT MORE THAN 3 MAKE 4,
--LESS THAN 10 BUT MORE THAN 6 MAKE 3,
--MORE THAN 10 MAKE IT 2 FOR EVERY ORDER ID.
SELECT ORDER_ID, 
    SHIP_DATE - ORDER_DATE AS DAYS_TO_SHIP,
    CASE
        WHEN DAYS_TO_SHIP <= 3 THEN 5
        WHEN DAYS_TO_SHIP BETWEEN 3 AND 6 THEN 4
        WHEN DAYS_TO_SHIP BETWEEN 7 AND 10 THEN 3
        ELSE 2 
    END AS RATING
FROM SALES_DATA
GROUP BY ORDER_ID, SHIP_DATE, ORDER_DATE;

SELECT * FROM SALES_DATA LIMIT 10;
SELECT COUNT(*) FROM SALES_DATA;
SELECT category, COUNT(category)
FROM SALES_DATA
GROUP BY CATEGORY;